class Solution {
public:
    int n, m;
    vector<vector<int>> directions{{1, 0}, {-1, 0}, {0, -1}, {0, 1}};
    
    bool find(vector<vector<char>>& board, int i, int j, int idx, string& word) {
        if (idx >= word.length())
            return true;
        if (i < 0 || j < 0 || i >= m || j >= n || board[i][j] != word[idx])//s
            return false;

        char temp = board[i][j];
        board[i][j] = '&'; //s

        for (auto& dir : directions) { //up     down     left      right
            int newrow = i + dir[0]; //{1, 0}, {-1, 0}, {0, -1}, {0, 1}   // {-1+0}=-1
            int newcol = j + dir[1];// // 0+0=0 
            if (find(board, newrow, newcol, idx + 1, word))
                return true;
        }
        board[i][j] = temp;
        return false;
    }

    bool exist(vector<vector<char>>& board, string word) {
        m = board.size();
        n = board[0].size();
        int l = word.length();

        if (m * n < l)
            return false;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word[0] && find(board, i, j, 0, word)) {
                    return true;
                }
            }
        }
        return false;
    }
};
